import {
  DIALOG_WIDTH,
  PickersActionBar,
  WrapperVariantContext,
  getDisplayDate,
  onSpaceOrEnter,
  useLocaleText,
  useUtils
} from "./chunk-LZ4ILKDS.js";
import {
  Dialog_default,
  dialogClasses_default
} from "./chunk-USSB55DX.js";
import {
  DialogContent_default
} from "./chunk-YXG3O4OP.js";
import {
  useEventCallback_default
} from "./chunk-W4TWWDE2.js";
import {
  styled_default
} from "./chunk-VMNSI7QU.js";
import {
  _extends,
  _objectWithoutPropertiesLoose
} from "./chunk-RROBQ2YN.js";
import {
  require_jsx_runtime
} from "./chunk-I7VHKRBV.js";
import {
  require_react
} from "./chunk-YN3MIK7E.js";
import {
  __toESM
} from "./chunk-4EOJPDL2.js";

// node_modules/@mui/x-date-pickers/internals/components/wrappers/MobileWrapper.js
var React2 = __toESM(require_react());

// node_modules/@mui/x-date-pickers/internals/components/PickersModalDialog.js
var React = __toESM(require_react());
var import_jsx_runtime = __toESM(require_jsx_runtime());
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var PickersModalDialogRoot = styled_default(Dialog_default)({
  [`& .${dialogClasses_default.container}`]: {
    outline: 0
  },
  [`& .${dialogClasses_default.paper}`]: {
    outline: 0,
    minWidth: DIALOG_WIDTH
  }
});
var PickersModalDialogContent = styled_default(DialogContent_default)({
  "&:first-of-type": {
    padding: 0
  }
});
var PickersModalDialog = (props) => {
  var _components$ActionBar;
  const {
    children,
    DialogProps = {},
    onAccept,
    onClear,
    onDismiss,
    onCancel,
    onSetToday,
    open,
    components,
    componentsProps
  } = props;
  const ActionBar = (_components$ActionBar = components == null ? void 0 : components.ActionBar) != null ? _components$ActionBar : PickersActionBar;
  return (0, import_jsx_runtime2.jsxs)(PickersModalDialogRoot, _extends({
    open,
    onClose: onDismiss
  }, DialogProps, {
    children: [(0, import_jsx_runtime.jsx)(PickersModalDialogContent, {
      children
    }), (0, import_jsx_runtime.jsx)(ActionBar, _extends({
      onAccept,
      onClear,
      onCancel,
      onSetToday,
      actions: ["cancel", "accept"]
    }, componentsProps == null ? void 0 : componentsProps.actionBar))]
  }));
};

// node_modules/@mui/x-date-pickers/internals/components/wrappers/MobileWrapper.js
var import_jsx_runtime3 = __toESM(require_jsx_runtime());
var import_jsx_runtime4 = __toESM(require_jsx_runtime());
var _excluded = ["children", "DateInputProps", "DialogProps", "onAccept", "onClear", "onDismiss", "onCancel", "onSetToday", "open", "PureDateInputComponent", "components", "componentsProps"];
function MobileWrapper(props) {
  const {
    children,
    DateInputProps,
    DialogProps,
    onAccept,
    onClear,
    onDismiss,
    onCancel,
    onSetToday,
    open,
    PureDateInputComponent,
    components,
    componentsProps
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded);
  return (0, import_jsx_runtime4.jsxs)(WrapperVariantContext.Provider, {
    value: "mobile",
    children: [(0, import_jsx_runtime3.jsx)(PureDateInputComponent, _extends({
      components
    }, other, DateInputProps)), (0, import_jsx_runtime3.jsx)(PickersModalDialog, {
      DialogProps,
      onAccept,
      onClear,
      onDismiss,
      onCancel,
      onSetToday,
      open,
      components,
      componentsProps,
      children
    })]
  });
}

// node_modules/@mui/x-date-pickers/internals/components/PureDateInput.js
var React3 = __toESM(require_react());
var PureDateInput = React3.forwardRef(function PureDateInput2(props, ref) {
  const {
    disabled,
    getOpenDialogAriaText: getOpenDialogAriaTextProp,
    inputFormat,
    InputProps,
    inputRef,
    label,
    openPicker: onOpen,
    rawValue,
    renderInput,
    TextFieldProps = {},
    validationError,
    className
  } = props;
  const localeText = useLocaleText();
  const getOpenDialogAriaText = getOpenDialogAriaTextProp != null ? getOpenDialogAriaTextProp : localeText.openDatePickerDialogue;
  const utils = useUtils();
  const PureDateInputProps = React3.useMemo(() => _extends({}, InputProps, {
    readOnly: true
  }), [InputProps]);
  const inputValue = getDisplayDate(utils, rawValue, inputFormat);
  const handleOnClick = useEventCallback_default((event) => {
    event.stopPropagation();
    onOpen();
  });
  return renderInput(_extends({
    label,
    disabled,
    ref,
    inputRef,
    error: validationError,
    InputProps: PureDateInputProps,
    className
  }, !props.readOnly && !props.disabled && {
    onClick: handleOnClick
  }, {
    inputProps: _extends({
      disabled,
      readOnly: true,
      "aria-readonly": true,
      "aria-label": getOpenDialogAriaText(rawValue, utils),
      value: inputValue
    }, !props.readOnly && {
      onClick: handleOnClick
    }, {
      onKeyDown: onSpaceOrEnter(onOpen)
    })
  }, TextFieldProps));
});

export {
  MobileWrapper,
  PureDateInput
};
//# sourceMappingURL=chunk-EZYPDZHY.js.map
